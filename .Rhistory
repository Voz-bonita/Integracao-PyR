if (!require("pacman")) install.packages("pacman")
p_load(reticulate)
if (!require("pacman")) install.packages("pacman")
p_load(reticulate)
use_python("C:\Users\pedro\anaconda3")
if (!require("pacman")) install.packages("pacman")
p_load(reticulate)
use_python("C:/Users/pedro/anaconda3")
reticulate::repl_python()
import numpy as np
print(np.zeros(3))
import numpy as np
print(np.zeros(3))
from sklearn.datasets import load_breast_cancer
X, y = load_breast_cancer(return_X_y=True)
from sklearn.datasets import load_breast_cancer
X, y = load_breast_cancer(return_X_y=True)
from sklearn.datasets import load_breast_cancer
X, y = load_breast_cancer(return_X_y=True)
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.svm import LinearSVC
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
X, y = load_breast_cancer(return_X_y=True)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = Pipeline([
("scaler", StandardScaler()),
("pca", PCA(n_components=4)),
("svm", LinearSVC(C=8.71))
])
model.fit(X_train, y_train)
y_pred = model.predict(X_train)
accuracy_score(y_test, y_pred)
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.svm import LinearSVC
from sklearn.pipeline import Pipeline
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
X, y = load_breast_cancer(return_X_y=True)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = Pipeline([
("scaler", StandardScaler()),
("pca", PCA(n_components=4)),
("svm", LinearSVC(C=8.71))
])
model.fit(X_train, y_train)
y_pred = model.predict(X_train)
print(accuracy_score(y_test, y_pred))
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.svm import LinearSVC
from sklearn.pipeline import Pipeline
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
X, y = load_breast_cancer(return_X_y=True)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = Pipeline([
("scaler", StandardScaler()),
("pca", PCA(n_components=4)),
("svm", LinearSVC(C=8.71))
])
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
print(accuracy_score(y_test, y_pred))
quit
2+2
?conda_python
conda_python("base")
dirname(conda_python("base"))
reticulate::repl_python()
print(model)
print(model["svm"])
model["svm"].get_params()
mtcars
n
pacman::p_load(reticulate)
use_condaenv("base")
#use_python("C:/Users/pedro/anaconda3")
reticulate::repl_python()
from sklearn.datasets import load_breast_cancer
X, y = load_breast_cancer(return_X_y=True)
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.svm import LinearSVC
model = Pipeline([
("scaler", StandardScaler()),
("pca", PCA(n_components=4)),
("svm", LinearSVC(C=8.71))
])
from sklearn.metrics import accuracy_score
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
print(accuracy_score(y_test, y_pred))
svm_coefs = model["svm"].coef_
quit
py$svm_coefs
reticulate::repl_python()
svc_coefs = model["svm"].coef_
quit
py$svc_coefs
reticulate::repl_python()
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.svm import LinearSVC
model = Pipeline([
("scaler", StandardScaler()),
("pca", PCA(n_components=4)),
("svc", LinearSVC(C=8.71))
])
from sklearn.metrics import accuracy_score
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
print(accuracy_score(y_test, y_pred))
svc_coefs = model["svc"].coef_
quit
py$svc_coefs
reticulate::repl_python()
svc_coefs = model["svc"].coef_
quit
py$svc_coefs
reticulate::repl_python()
from sklearn.metrics import accuracy_score
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
print("Precisão:", accuracy_score(y_test, y_pred))
quit
py
py$svc_coefs
reticulate::repl_python()
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.svm import LinearSVC
model = Pipeline([
("scaler", StandardScaler()),
#  ("pca", PCA(n_components=4)),
("svc", LinearSVC(C=8.71))
])
from sklearn.metrics import accuracy_score
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
print("Precisão:", accuracy_score(y_test, y_pred))
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.svm import LinearSVC
model = Pipeline([
("scaler", StandardScaler()),
("pca", PCA(n_components=4)),
("svc", LinearSVC(C=8.71))
])
from sklearn.metrics import accuracy_score
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
print("Precisão:", accuracy_score(y_test, y_pred))
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.svm import LinearSVC
model = Pipeline([
("scaler", StandardScaler()),
("pca", PCA(n_components=5)),
("svc", LinearSVC(C=8.71))
])
from sklearn.metrics import accuracy_score
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
print("Precisão:", accuracy_score(y_test, y_pred))
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.svm import LinearSVC
model = Pipeline([
("scaler", StandardScaler()),
("pca", PCA(n_components=6)),
("svc", LinearSVC(C=8.71))
])
from sklearn.metrics import accuracy_score
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
print("Precisão:", accuracy_score(y_test, y_pred))
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.svm import LinearSVC
model = Pipeline([
("scaler", StandardScaler()),
("pca", PCA(n_components=7)),
("svc", LinearSVC(C=8.71))
])
from sklearn.metrics import accuracy_score
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
print("Precisão:", accuracy_score(y_test, y_pred))
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.svm import LinearSVC
model = Pipeline([
("scaler", StandardScaler()),
("pca", PCA(n_components=5)),
("svc", LinearSVC(C=8.71))
])
from sklearn.metrics import accuracy_score
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
print("Precisão:", accuracy_score(y_test, y_pred))
import matplotlib.pyplot as plt
plt.scatter(X[:, 0], X[:, 1])
import matplotlib.pyplot as plt
plt.scatter(X[:, 0], X[:, 1])
plt.plot()
